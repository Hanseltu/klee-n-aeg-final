; ModuleID = 't1.bc'
source_filename = "t1.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.anon = type { %struct.Type1*, %struct.Type2* }
%struct.Type1 = type { [8 x i8] }
%struct.Type2 = type { i32, i64* }

@.str = private unnamed_addr constant [30 x i8] c"/////This is a Good function\0A\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"/////This is a Evil function\0A\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"init value\00", align 1
@.str.3 = private unnamed_addr constant [29 x i8] c"read from input string = %s\0A\00", align 1
@gvar = dso_local global %struct.anon zeroinitializer, align 8, !dbg !0
@.str.4 = private unnamed_addr constant [6 x i8] c"input\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"addr of handler: %p. \0A\00", align 1
@handler = common dso_local global i32 (i32*)* null, align 8, !dbg !23
@.str.6 = private unnamed_addr constant [23 x i8] c"addr of badFunc: %p. \0A\00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"addr of global_a: %p. \0A\00", align 1
@global_a = common dso_local global i64 0, align 8, !dbg !30
@.str.8 = private unnamed_addr constant [26 x i8] c"crashing path is taken. \0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"address of a = %p\0A\00", align 1
@.str.10 = private unnamed_addr constant [38 x i8] c"..........exploiting path is taken. \0A\00", align 1
@.str.11 = private unnamed_addr constant [38 x i8] c"Before executing indirect call  ... \0A\00", align 1
@global_b = common dso_local global i64 0, align 8, !dbg !32

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @goodFunc(i32*) #0 !dbg !42 {
  %2 = alloca i32*, align 8
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !43, metadata !DIExpression()), !dbg !44
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0)), !dbg !45
  ret i32 0, !dbg !46
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @badFunc(i32*) #0 !dbg !47 {
  %2 = alloca i32*, align 8
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !48, metadata !DIExpression()), !dbg !49
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)), !dbg !50
  ret i32 0, !dbg !51
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ggoodFunc(i32) #0 !dbg !52 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !55, metadata !DIExpression()), !dbg !56
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0)), !dbg !57
  ret i32 0, !dbg !58
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @bbadFunc(i32) #0 !dbg !59 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !60, metadata !DIExpression()), !dbg !61
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)), !dbg !62
  ret i32 0, !dbg !63
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @read_from_input(i32, i8**) #0 !dbg !64 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !69, metadata !DIExpression()), !dbg !70
  store i8** %1, i8*** %4, align 8
  call void @llvm.dbg.declare(metadata i8*** %4, metadata !71, metadata !DIExpression()), !dbg !72
  %6 = load i8**, i8*** %4, align 8, !dbg !73
  %7 = getelementptr inbounds i8*, i8** %6, i64 1, !dbg !73
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8** %7, align 8, !dbg !74
  call void @llvm.dbg.declare(metadata i8** %5, metadata !75, metadata !DIExpression()), !dbg !78
  %8 = load i8**, i8*** %4, align 8, !dbg !79
  %9 = getelementptr inbounds i8*, i8** %8, i64 1, !dbg !79
  %10 = load i8*, i8** %9, align 8, !dbg !79
  store i8* %10, i8** %5, align 8, !dbg !78
  %11 = load i8*, i8** %5, align 8, !dbg !80
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0), i8* %11), !dbg !81
  %13 = load i8*, i8** %5, align 8, !dbg !82
  %14 = call i64 @atol(i8* %13) #6, !dbg !83
  ret i64 %14, !dbg !84
}

; Function Attrs: nounwind readonly
declare dso_local i64 @atol(i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main(i32, i8**) #0 !dbg !85 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca [48 x i8], align 16
  %8 = alloca i64*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !88, metadata !DIExpression()), !dbg !89
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !90, metadata !DIExpression()), !dbg !91
  %9 = call noalias i8* @malloc(i64 8) #7, !dbg !92
  %10 = bitcast i8* %9 to %struct.Type1*, !dbg !93
  store %struct.Type1* %10, %struct.Type1** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 0), align 8, !dbg !94
  %11 = call noalias i8* @malloc(i64 16) #7, !dbg !95
  %12 = bitcast i8* %11 to %struct.Type2*, !dbg !96
  store %struct.Type2* %12, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8, !dbg !97
  call void @llvm.dbg.declare(metadata i32* %6, metadata !98, metadata !DIExpression()), !dbg !99
  call void @llvm.dbg.declare(metadata [48 x i8]* %7, metadata !100, metadata !DIExpression()), !dbg !104
  %13 = getelementptr inbounds [48 x i8], [48 x i8]* %7, i64 0, i64 0, !dbg !105
  call void @klee_make_symbolic(i8* %13, i64 48, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0)), !dbg !106
  %14 = load %struct.Type1*, %struct.Type1** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 0), align 8, !dbg !107
  %15 = getelementptr inbounds %struct.Type1, %struct.Type1* %14, i32 0, i32 0, !dbg !108
  %16 = bitcast [8 x i8]* %15 to i8*, !dbg !109
  %17 = getelementptr inbounds [48 x i8], [48 x i8]* %7, i64 0, i64 0, !dbg !109
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 16 %17, i64 48, i1 false), !dbg !109
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i32 (i32*)** @handler), !dbg !110
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i64 0, i64 0), i32 (i32)* @bbadFunc), !dbg !111
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i64* @global_a), !dbg !112
  store i32 (i32*)* @goodFunc, i32 (i32*)** @handler, align 8, !dbg !113
  %21 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8, !dbg !114
  %22 = getelementptr inbounds %struct.Type2, %struct.Type2* %21, i32 0, i32 0, !dbg !116
  %23 = load i32, i32* %22, align 8, !dbg !116
  %24 = icmp ne i32 %23, 0, !dbg !117
  br i1 %24, label %25, label %27, !dbg !118

25:                                               ; preds = %2
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.8, i64 0, i64 0)), !dbg !119
  br label %39, !dbg !121

27:                                               ; preds = %2
  call void @llvm.dbg.declare(metadata i64** %8, metadata !122, metadata !DIExpression()), !dbg !124
  %28 = call noalias i8* @malloc(i64 8) #7, !dbg !125
  %29 = bitcast i8* %28 to i64*, !dbg !125
  store i64* %29, i64** %8, align 8, !dbg !124
  %30 = load i64*, i64** %8, align 8, !dbg !126
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0), i64* %30), !dbg !127
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10, i64 0, i64 0)), !dbg !128
  %33 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8, !dbg !129
  %34 = getelementptr inbounds %struct.Type2, %struct.Type2* %33, i32 0, i32 1, !dbg !130
  %35 = load i64*, i64** %34, align 8, !dbg !130
  store i64 ptrtoint (i32 (i32*)* @badFunc to i64), i64* %35, align 8, !dbg !131
  %36 = load i64*, i64** %8, align 8, !dbg !132
  %37 = load i64, i64* %36, align 8, !dbg !133
  %38 = inttoptr i64 %37 to i32 (i32*)*, !dbg !133
  store i32 (i32*)* %38, i32 (i32*)** @handler, align 8, !dbg !134
  br label %39

39:                                               ; preds = %27, %25
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.11, i64 0, i64 0)), !dbg !135
  %41 = load i32 (i32*)*, i32 (i32*)** @handler, align 8, !dbg !136
  %42 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8, !dbg !137
  %43 = getelementptr inbounds %struct.Type2, %struct.Type2* %42, i32 0, i32 1, !dbg !138
  %44 = load i64*, i64** %43, align 8, !dbg !138
  %45 = bitcast i64* %44 to i32*, !dbg !139
  %46 = call i32 %41(i32* %45), !dbg !136
  %47 = load i32, i32* %6, align 4, !dbg !140
  ret i32 %47, !dbg !141
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #4

declare dso_local void @klee_make_symbolic(i8*, i64, i8*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind readonly }
attributes #7 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!38, !39, !40}
!llvm.ident = !{!41}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "gvar", scope: !2, file: !3, line: 34, type: !34, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !22, nameTableKind: None)
!3 = !DIFile(filename: "t1.c", directory: "/home/jqhong/klee-nme/klee-nme-aeg/klee-n-aeg-final/examples/exploit-examples")
!4 = !{}
!5 = !{!6, !14}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Type1", file: !3, line: 6, size: 64, elements: !8)
!8 = !{!9}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !7, file: !3, line: 6, baseType: !10, size: 64)
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 64, elements: !12)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!12 = !{!13}
!13 = !DISubrange(count: 8)
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!15 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Type2", file: !3, line: 7, size: 128, elements: !16)
!16 = !{!17, !19}
!17 = !DIDerivedType(tag: DW_TAG_member, name: "status", scope: !15, file: !3, line: 8, baseType: !18, size: 32)
!18 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!19 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !15, file: !3, line: 10, baseType: !20, size: 64, offset: 64)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!22 = !{!0, !23, !30, !32}
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(name: "handler", scope: !2, file: !3, line: 14, type: !25, isLocal: false, isDefinition: true)
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
!26 = !DISubroutineType(types: !27)
!27 = !{!18, !28}
!28 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !29, size: 64)
!29 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !18)
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "global_a", scope: !2, file: !3, line: 20, type: !21, isLocal: false, isDefinition: true)
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(name: "global_b", scope: !2, file: !3, line: 21, type: !21, isLocal: false, isDefinition: true)
!34 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 34, size: 128, elements: !35)
!35 = !{!36, !37}
!36 = !DIDerivedType(tag: DW_TAG_member, name: "obj1", scope: !34, file: !3, line: 34, baseType: !6, size: 64)
!37 = !DIDerivedType(tag: DW_TAG_member, name: "obj2", scope: !34, file: !3, line: 34, baseType: !14, size: 64, offset: 64)
!38 = !{i32 2, !"Dwarf Version", i32 4}
!39 = !{i32 2, !"Debug Info Version", i32 3}
!40 = !{i32 1, !"wchar_size", i32 4}
!41 = !{!"clang version 9.0.0 (tags/RELEASE_900/final)"}
!42 = distinct !DISubprogram(name: "goodFunc", scope: !3, file: !3, line: 15, type: !26, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!43 = !DILocalVariable(name: "var", arg: 1, scope: !42, file: !3, line: 15, type: !28)
!44 = !DILocation(line: 15, column: 25, scope: !42)
!45 = !DILocation(line: 15, column: 30, scope: !42)
!46 = !DILocation(line: 15, column: 71, scope: !42)
!47 = distinct !DISubprogram(name: "badFunc", scope: !3, file: !3, line: 16, type: !26, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!48 = !DILocalVariable(name: "var", arg: 1, scope: !47, file: !3, line: 16, type: !28)
!49 = !DILocation(line: 16, column: 24, scope: !47)
!50 = !DILocation(line: 16, column: 29, scope: !47)
!51 = !DILocation(line: 16, column: 70, scope: !47)
!52 = distinct !DISubprogram(name: "ggoodFunc", scope: !3, file: !3, line: 17, type: !53, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!53 = !DISubroutineType(types: !54)
!54 = !{!18, !18}
!55 = !DILocalVariable(name: "a", arg: 1, scope: !52, file: !3, line: 17, type: !18)
!56 = !DILocation(line: 17, column: 19, scope: !52)
!57 = !DILocation(line: 17, column: 22, scope: !52)
!58 = !DILocation(line: 17, column: 63, scope: !52)
!59 = distinct !DISubprogram(name: "bbadFunc", scope: !3, file: !3, line: 18, type: !53, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!60 = !DILocalVariable(name: "a", arg: 1, scope: !59, file: !3, line: 18, type: !18)
!61 = !DILocation(line: 18, column: 18, scope: !59)
!62 = !DILocation(line: 18, column: 21, scope: !59)
!63 = !DILocation(line: 18, column: 62, scope: !59)
!64 = distinct !DISubprogram(name: "read_from_input", scope: !3, file: !3, line: 24, type: !65, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!65 = !DISubroutineType(types: !66)
!66 = !{!21, !18, !67}
!67 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !68, size: 64)
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!69 = !DILocalVariable(name: "argc", arg: 1, scope: !64, file: !3, line: 24, type: !18)
!70 = !DILocation(line: 24, column: 26, scope: !64)
!71 = !DILocalVariable(name: "argv", arg: 2, scope: !64, file: !3, line: 24, type: !67)
!72 = !DILocation(line: 24, column: 38, scope: !64)
!73 = !DILocation(line: 29, column: 5, scope: !64)
!74 = !DILocation(line: 29, column: 13, scope: !64)
!75 = !DILocalVariable(name: "value", scope: !64, file: !3, line: 30, type: !76)
!76 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !77, size: 64)
!77 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !11)
!78 = !DILocation(line: 30, column: 17, scope: !64)
!79 = !DILocation(line: 30, column: 25, scope: !64)
!80 = !DILocation(line: 31, column: 45, scope: !64)
!81 = !DILocation(line: 31, column: 5, scope: !64)
!82 = !DILocation(line: 32, column: 17, scope: !64)
!83 = !DILocation(line: 32, column: 12, scope: !64)
!84 = !DILocation(line: 32, column: 5, scope: !64)
!85 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 35, type: !86, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!86 = !DISubroutineType(types: !87)
!87 = !{!18, !18, !67}
!88 = !DILocalVariable(name: "argc", arg: 1, scope: !85, file: !3, line: 35, type: !18)
!89 = !DILocation(line: 35, column: 14, scope: !85)
!90 = !DILocalVariable(name: "argv", arg: 2, scope: !85, file: !3, line: 35, type: !67)
!91 = !DILocation(line: 35, column: 26, scope: !85)
!92 = !DILocation(line: 36, column: 32, scope: !85)
!93 = !DILocation(line: 36, column: 17, scope: !85)
!94 = !DILocation(line: 36, column: 15, scope: !85)
!95 = !DILocation(line: 37, column: 32, scope: !85)
!96 = !DILocation(line: 37, column: 17, scope: !85)
!97 = !DILocation(line: 37, column: 15, scope: !85)
!98 = !DILocalVariable(name: "res", scope: !85, file: !3, line: 38, type: !18)
!99 = !DILocation(line: 38, column: 9, scope: !85)
!100 = !DILocalVariable(name: "input", scope: !85, file: !3, line: 39, type: !101)
!101 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 384, elements: !102)
!102 = !{!103}
!103 = !DISubrange(count: 48)
!104 = !DILocation(line: 39, column: 10, scope: !85)
!105 = !DILocation(line: 40, column: 24, scope: !85)
!106 = !DILocation(line: 40, column: 5, scope: !85)
!107 = !DILocation(line: 41, column: 19, scope: !85)
!108 = !DILocation(line: 41, column: 25, scope: !85)
!109 = !DILocation(line: 41, column: 5, scope: !85)
!110 = !DILocation(line: 43, column: 5, scope: !85)
!111 = !DILocation(line: 46, column: 5, scope: !85)
!112 = !DILocation(line: 47, column: 5, scope: !85)
!113 = !DILocation(line: 53, column: 13, scope: !85)
!114 = !DILocation(line: 56, column: 13, scope: !115)
!115 = distinct !DILexicalBlock(scope: !85, file: !3, line: 56, column: 8)
!116 = !DILocation(line: 56, column: 19, scope: !115)
!117 = !DILocation(line: 56, column: 8, scope: !115)
!118 = !DILocation(line: 56, column: 8, scope: !85)
!119 = !DILocation(line: 58, column: 9, scope: !120)
!120 = distinct !DILexicalBlock(scope: !115, file: !3, line: 57, column: 5)
!121 = !DILocation(line: 60, column: 5, scope: !120)
!122 = !DILocalVariable(name: "a", scope: !123, file: !3, line: 63, type: !20)
!123 = distinct !DILexicalBlock(scope: !115, file: !3, line: 62, column: 5)
!124 = !DILocation(line: 63, column: 15, scope: !123)
!125 = !DILocation(line: 63, column: 19, scope: !123)
!126 = !DILocation(line: 64, column: 39, scope: !123)
!127 = !DILocation(line: 64, column: 9, scope: !123)
!128 = !DILocation(line: 65, column: 9, scope: !123)
!129 = !DILocation(line: 66, column: 15, scope: !123)
!130 = !DILocation(line: 66, column: 21, scope: !123)
!131 = !DILocation(line: 66, column: 25, scope: !123)
!132 = !DILocation(line: 78, column: 21, scope: !123)
!133 = !DILocation(line: 78, column: 20, scope: !123)
!134 = !DILocation(line: 78, column: 18, scope: !123)
!135 = !DILocation(line: 95, column: 5, scope: !85)
!136 = !DILocation(line: 96, column: 5, scope: !85)
!137 = !DILocation(line: 96, column: 18, scope: !85)
!138 = !DILocation(line: 96, column: 24, scope: !85)
!139 = !DILocation(line: 96, column: 13, scope: !85)
!140 = !DILocation(line: 97, column: 12, scope: !85)
!141 = !DILocation(line: 97, column: 5, scope: !85)
