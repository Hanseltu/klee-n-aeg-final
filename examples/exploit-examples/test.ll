; ModuleID = 'test.bc'
source_filename = "test.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.anon = type { %struct.Type1*, %struct.Type2* }
%struct.Type1 = type { [8 x i8] }
%struct.Type2 = type { i32, i32* }

@.str = private unnamed_addr constant [30 x i8] c"/////This is a Good function\0A\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"/////This is a Evil function\0A\00", align 1
@gvar = dso_local global %struct.anon zeroinitializer, align 8, !dbg !0
@.str.2 = private unnamed_addr constant [6 x i8] c"input\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"addr of handler: %p. \0A\00", align 1
@handler = common dso_local global i32 (i32*)* null, align 8, !dbg !34
@.str.4 = private unnamed_addr constant [24 x i8] c"addr of handler1: %p. \0A\00", align 1
@handler1 = common dso_local global i32 (i32*)* null, align 8, !dbg !22
@handler2 = common dso_local global i32 (i32)* null, align 8, !dbg !29
@.str.5 = private unnamed_addr constant [26 x i8] c"crashing path is taken. \0A\00", align 1
@.str.6 = private unnamed_addr constant [38 x i8] c"..........exploiting path is taken. \0A\00", align 1
@.str.7 = private unnamed_addr constant [38 x i8] c"Before executing indirect call  ... \0A\00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"another 1st path\0A\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"another 2nd path\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @goodFunc(i32*) #0 !dbg !44 {
  %2 = alloca i32*, align 8
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !45, metadata !DIExpression()), !dbg !46
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0)), !dbg !47
  ret i32 0, !dbg !48
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @badFunc(i32*) #0 !dbg !49 {
  %2 = alloca i32*, align 8
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !50, metadata !DIExpression()), !dbg !51
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)), !dbg !52
  ret i32 0, !dbg !53
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ggoodFunc(i32) #0 !dbg !54 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !55, metadata !DIExpression()), !dbg !56
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0)), !dbg !57
  ret i32 0, !dbg !58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @bbadFunc(i32) #0 !dbg !59 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !60, metadata !DIExpression()), !dbg !61
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)), !dbg !62
  ret i32 0, !dbg !63
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #0 !dbg !64 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca [48 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !69, metadata !DIExpression()), !dbg !70
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !71, metadata !DIExpression()), !dbg !72
  %8 = call noalias i8* @malloc(i64 8) #5, !dbg !73
  %9 = bitcast i8* %8 to %struct.Type1*, !dbg !74
  store %struct.Type1* %9, %struct.Type1** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 0), align 8, !dbg !75
  %10 = call noalias i8* @malloc(i64 16) #5, !dbg !76
  %11 = bitcast i8* %10 to %struct.Type2*, !dbg !77
  store %struct.Type2* %11, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8, !dbg !78
  call void @llvm.dbg.declare(metadata i32* %6, metadata !79, metadata !DIExpression()), !dbg !80
  call void @llvm.dbg.declare(metadata [48 x i8]* %7, metadata !81, metadata !DIExpression()), !dbg !85
  %12 = getelementptr inbounds [48 x i8], [48 x i8]* %7, i64 0, i64 0, !dbg !86
  call void @klee_make_symbolic(i8* %12, i64 48, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)), !dbg !87
  %13 = load %struct.Type1*, %struct.Type1** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 0), align 8, !dbg !88
  %14 = getelementptr inbounds %struct.Type1, %struct.Type1* %13, i32 0, i32 0, !dbg !89
  %15 = bitcast [8 x i8]* %14 to i8*, !dbg !90
  %16 = getelementptr inbounds [48 x i8], [48 x i8]* %7, i64 0, i64 0, !dbg !90
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 16 %16, i64 48, i1 false), !dbg !90
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 (i32*)** @handler), !dbg !91
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0), i32 (i32*)** @handler1), !dbg !92
  store i32 (i32*)* @goodFunc, i32 (i32*)** @handler, align 8, !dbg !93
  store i32 (i32*)* @goodFunc, i32 (i32*)** @handler1, align 8, !dbg !94
  store i32 (i32)* @ggoodFunc, i32 (i32)** @handler2, align 8, !dbg !95
  %19 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8, !dbg !96
  %20 = getelementptr inbounds %struct.Type2, %struct.Type2* %19, i32 0, i32 0, !dbg !98
  %21 = load i32, i32* %20, align 8, !dbg !98
  %22 = icmp ne i32 %21, 0, !dbg !99
  br i1 %22, label %23, label %29, !dbg !100

23:                                               ; preds = %2
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0)), !dbg !101
  %25 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8, !dbg !103
  %26 = getelementptr inbounds %struct.Type2, %struct.Type2* %25, i32 0, i32 1, !dbg !104
  %27 = load i32*, i32** %26, align 8, !dbg !104
  %28 = load i32, i32* %27, align 4, !dbg !105
  store i32 %28, i32* %6, align 4, !dbg !106
  br label %34, !dbg !107

29:                                               ; preds = %2
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.6, i64 0, i64 0)), !dbg !108
  %31 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8, !dbg !110
  %32 = getelementptr inbounds %struct.Type2, %struct.Type2* %31, i32 0, i32 1, !dbg !111
  %33 = load i32*, i32** %32, align 8, !dbg !111
  store i32 ptrtoint (i32 (i32)* @bbadFunc to i32), i32* %33, align 4, !dbg !112
  br label %34

34:                                               ; preds = %29, %23
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7, i64 0, i64 0)), !dbg !113
  %36 = load i32 (i32)*, i32 (i32)** @handler2, align 8, !dbg !114
  %37 = call i32 %36(i32 0), !dbg !114
  %38 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8, !dbg !115
  %39 = getelementptr inbounds %struct.Type2, %struct.Type2* %38, i32 0, i32 0, !dbg !117
  %40 = load i32, i32* %39, align 8, !dbg !117
  %41 = icmp ne i32 %40, 0, !dbg !118
  br i1 %41, label %42, label %44, !dbg !119

42:                                               ; preds = %34
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i64 0, i64 0)), !dbg !120
  br label %46, !dbg !122

44:                                               ; preds = %34
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0)), !dbg !123
  br label %46

46:                                               ; preds = %44, %42
  %47 = load i32, i32* %6, align 4, !dbg !125
  ret i32 %47, !dbg !126
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #3

declare dso_local void @klee_make_symbolic(i8*, i64, i8*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!40, !41, !42}
!llvm.ident = !{!43}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "gvar", scope: !2, file: !3, line: 19, type: !36, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.0-2~ubuntu18.04.2 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !21, nameTableKind: None)
!3 = !DIFile(filename: "test.c", directory: "/home/jqhong/klee-nme/klee-nme-aeg/klee-n-aeg/examples/exploit-examples")
!4 = !{}
!5 = !{!6, !14}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Type1", file: !3, line: 6, size: 64, elements: !8)
!8 = !{!9}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !7, file: !3, line: 6, baseType: !10, size: 64)
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 64, elements: !12)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!12 = !{!13}
!13 = !DISubrange(count: 8)
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!15 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Type2", file: !3, line: 7, size: 128, elements: !16)
!16 = !{!17, !19}
!17 = !DIDerivedType(tag: DW_TAG_member, name: "status", scope: !15, file: !3, line: 8, baseType: !18, size: 32)
!18 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!19 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !15, file: !3, line: 9, baseType: !20, size: 64, offset: 64)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18, size: 64)
!21 = !{!0, !22, !29, !34}
!22 = !DIGlobalVariableExpression(var: !23, expr: !DIExpression())
!23 = distinct !DIGlobalVariable(name: "handler1", scope: !2, file: !3, line: 11, type: !24, isLocal: false, isDefinition: true)
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64)
!25 = !DISubroutineType(types: !26)
!26 = !{!18, !27}
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !28, size: 64)
!28 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !18)
!29 = !DIGlobalVariableExpression(var: !30, expr: !DIExpression())
!30 = distinct !DIGlobalVariable(name: "handler2", scope: !2, file: !3, line: 12, type: !31, isLocal: false, isDefinition: true)
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !32, size: 64)
!32 = !DISubroutineType(types: !33)
!33 = !{!18, !18}
!34 = !DIGlobalVariableExpression(var: !35, expr: !DIExpression())
!35 = distinct !DIGlobalVariable(name: "handler", scope: !2, file: !3, line: 13, type: !24, isLocal: false, isDefinition: true)
!36 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 19, size: 128, elements: !37)
!37 = !{!38, !39}
!38 = !DIDerivedType(tag: DW_TAG_member, name: "obj1", scope: !36, file: !3, line: 19, baseType: !6, size: 64)
!39 = !DIDerivedType(tag: DW_TAG_member, name: "obj2", scope: !36, file: !3, line: 19, baseType: !14, size: 64, offset: 64)
!40 = !{i32 2, !"Dwarf Version", i32 4}
!41 = !{i32 2, !"Debug Info Version", i32 3}
!42 = !{i32 1, !"wchar_size", i32 4}
!43 = !{!"clang version 9.0.0-2~ubuntu18.04.2 (tags/RELEASE_900/final)"}
!44 = distinct !DISubprogram(name: "goodFunc", scope: !3, file: !3, line: 14, type: !25, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!45 = !DILocalVariable(name: "var", arg: 1, scope: !44, file: !3, line: 14, type: !27)
!46 = !DILocation(line: 14, column: 25, scope: !44)
!47 = !DILocation(line: 14, column: 30, scope: !44)
!48 = !DILocation(line: 14, column: 71, scope: !44)
!49 = distinct !DISubprogram(name: "badFunc", scope: !3, file: !3, line: 15, type: !25, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!50 = !DILocalVariable(name: "var", arg: 1, scope: !49, file: !3, line: 15, type: !27)
!51 = !DILocation(line: 15, column: 24, scope: !49)
!52 = !DILocation(line: 15, column: 29, scope: !49)
!53 = !DILocation(line: 15, column: 70, scope: !49)
!54 = distinct !DISubprogram(name: "ggoodFunc", scope: !3, file: !3, line: 16, type: !32, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!55 = !DILocalVariable(name: "a", arg: 1, scope: !54, file: !3, line: 16, type: !18)
!56 = !DILocation(line: 16, column: 19, scope: !54)
!57 = !DILocation(line: 16, column: 22, scope: !54)
!58 = !DILocation(line: 16, column: 63, scope: !54)
!59 = distinct !DISubprogram(name: "bbadFunc", scope: !3, file: !3, line: 17, type: !32, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!60 = !DILocalVariable(name: "a", arg: 1, scope: !59, file: !3, line: 17, type: !18)
!61 = !DILocation(line: 17, column: 18, scope: !59)
!62 = !DILocation(line: 17, column: 21, scope: !59)
!63 = !DILocation(line: 17, column: 62, scope: !59)
!64 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 20, type: !65, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!65 = !DISubroutineType(types: !66)
!66 = !{!18, !18, !67}
!67 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !68, size: 64)
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!69 = !DILocalVariable(name: "argc", arg: 1, scope: !64, file: !3, line: 20, type: !18)
!70 = !DILocation(line: 20, column: 14, scope: !64)
!71 = !DILocalVariable(name: "argv", arg: 2, scope: !64, file: !3, line: 20, type: !67)
!72 = !DILocation(line: 20, column: 26, scope: !64)
!73 = !DILocation(line: 21, column: 32, scope: !64)
!74 = !DILocation(line: 21, column: 17, scope: !64)
!75 = !DILocation(line: 21, column: 15, scope: !64)
!76 = !DILocation(line: 22, column: 32, scope: !64)
!77 = !DILocation(line: 22, column: 17, scope: !64)
!78 = !DILocation(line: 22, column: 15, scope: !64)
!79 = !DILocalVariable(name: "res", scope: !64, file: !3, line: 23, type: !18)
!80 = !DILocation(line: 23, column: 9, scope: !64)
!81 = !DILocalVariable(name: "input", scope: !64, file: !3, line: 24, type: !82)
!82 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 384, elements: !83)
!83 = !{!84}
!84 = !DISubrange(count: 48)
!85 = !DILocation(line: 24, column: 10, scope: !64)
!86 = !DILocation(line: 25, column: 24, scope: !64)
!87 = !DILocation(line: 25, column: 5, scope: !64)
!88 = !DILocation(line: 26, column: 19, scope: !64)
!89 = !DILocation(line: 26, column: 25, scope: !64)
!90 = !DILocation(line: 26, column: 5, scope: !64)
!91 = !DILocation(line: 28, column: 5, scope: !64)
!92 = !DILocation(line: 29, column: 5, scope: !64)
!93 = !DILocation(line: 37, column: 13, scope: !64)
!94 = !DILocation(line: 38, column: 14, scope: !64)
!95 = !DILocation(line: 39, column: 14, scope: !64)
!96 = !DILocation(line: 40, column: 13, scope: !97)
!97 = distinct !DILexicalBlock(scope: !64, file: !3, line: 40, column: 8)
!98 = !DILocation(line: 40, column: 19, scope: !97)
!99 = !DILocation(line: 40, column: 8, scope: !97)
!100 = !DILocation(line: 40, column: 8, scope: !64)
!101 = !DILocation(line: 42, column: 9, scope: !102)
!102 = distinct !DILexicalBlock(scope: !97, file: !3, line: 41, column: 5)
!103 = !DILocation(line: 43, column: 21, scope: !102)
!104 = !DILocation(line: 43, column: 27, scope: !102)
!105 = !DILocation(line: 43, column: 15, scope: !102)
!106 = !DILocation(line: 43, column: 13, scope: !102)
!107 = !DILocation(line: 44, column: 5, scope: !102)
!108 = !DILocation(line: 47, column: 9, scope: !109)
!109 = distinct !DILexicalBlock(scope: !97, file: !3, line: 46, column: 5)
!110 = !DILocation(line: 48, column: 15, scope: !109)
!111 = !DILocation(line: 48, column: 21, scope: !109)
!112 = !DILocation(line: 48, column: 25, scope: !109)
!113 = !DILocation(line: 71, column: 5, scope: !64)
!114 = !DILocation(line: 73, column: 5, scope: !64)
!115 = !DILocation(line: 74, column: 14, scope: !116)
!116 = distinct !DILexicalBlock(scope: !64, file: !3, line: 74, column: 9)
!117 = !DILocation(line: 74, column: 20, scope: !116)
!118 = !DILocation(line: 74, column: 9, scope: !116)
!119 = !DILocation(line: 74, column: 9, scope: !64)
!120 = !DILocation(line: 75, column: 9, scope: !121)
!121 = distinct !DILexicalBlock(scope: !116, file: !3, line: 74, column: 27)
!122 = !DILocation(line: 76, column: 5, scope: !121)
!123 = !DILocation(line: 77, column: 9, scope: !124)
!124 = distinct !DILexicalBlock(scope: !116, file: !3, line: 76, column: 11)
!125 = !DILocation(line: 79, column: 12, scope: !64)
!126 = !DILocation(line: 79, column: 5, scope: !64)
